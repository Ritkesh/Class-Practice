package com.example.OcrMyPdf.service;

import com.example.OcrMyPdf.entity.PdfDocument;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import java.io.*;
import java.nio.file.Files;
import java.util.concurrent.TimeUnit;

@Service
public class OcrHandler {

    @Value("${pdf.useLocal}")
    private String useLocal;

    @Value("${process.timeout.seconds}")
    private long processTimeoutSeconds;

    @Value("${pdf.local.directory}")
    private String localDirectory;

    private static final Logger logger = LoggerFactory.getLogger(OcrHandler.class);

    public void processPdfTest(PdfDocument pdfDocument) {
        String pdfName = "input.pdf";
        logger.info("Received request to process PDF: {}", pdfName);

        try {
            byte[] pdfBytes = new byte[0];
            if (Boolean.parseBoolean(useLocal)) {
                File sourceFile = new File(localDirectory, pdfName);
                if (!sourceFile.exists()) {
                    logger.error("Local PDF not found: {}", sourceFile.getAbsolutePath());
                    return;
                }
                logger.info("Loading PDF from local path: {}", sourceFile.getAbsolutePath());
                pdfBytes = Files.readAllBytes(sourceFile.toPath());
            }

            // Save input PDF to temp file
            File inputPdf = File.createTempFile("input", ".pdf");
            try (FileOutputStream fos = new FileOutputStream(inputPdf)) {
                fos.write(pdfBytes);
            }

            // Create temp file for ocrmypdf output
            File outputPdf = File.createTempFile("output", ".pdf");

            // Convert to WSL paths
            String wslInputPath = toWslPath(inputPdf.getAbsolutePath());
            String wslOutputPath = toWslPath(outputPdf.getAbsolutePath());

            // Command to run OCR
            String ocrCommand = String.format(
                    "ocrmypdf --skip-text --rotate-pages --deskew --jobs 4 \"%s\" \"%s\"",
                    wslInputPath, wslOutputPath
            );

            logger.info("Executing ocrmypdf command: {}", ocrCommand);

            ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", ocrCommand);
            processBuilder.redirectErrorStream(true);
            Process process = processBuilder.start();

            // Log OCR output
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    logger.info(line);
                }
            }

            // Wait for process to complete
            boolean finished = process.waitFor(processTimeoutSeconds, TimeUnit.SECONDS);
            if (!finished) {
                process.destroy();
                logger.error("ocrmypdf process timed out");
                return;
            }

            if (process.exitValue() != 0) {
                logger.error("ocrmypdf process failed with exit code {}", process.exitValue());
                return;
            }

            logger.info("ocrmypdf process completed successfully. Uploading...");

            // Upload the final output file
            uploadToExternalApi(outputPdf);

        } catch (IOException | InterruptedException e) {
            logger.error("Error processing PDF: {}", pdfName, e);
        }
    }

    private void uploadToExternalApi(File file) {
        String uploadUrl = "https://upload.gofile.io/uploadfile";
        RestTemplate restTemplate = new RestTemplate();
        FileSystemResource resource = new FileSystemResource(file);

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("file", resource);

        HttpHeaders headers = new HttpHeaders();
        headers.setBasicAuth("dmsjadenx_nprd", "prC1Y!ZU3%RU8stQ");
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        try {
            ResponseEntity<String> response = restTemplate.exchange(uploadUrl, HttpMethod.POST, requestEntity, String.class);
            logger.info("PDF uploaded successfully. Response: {}", response.getBody());
        } catch (Exception e) {
            logger.error("Exception during upload to external API", e);
        }
    }

    private String toWslPath(String windowsPath) {
        return windowsPath
                .replace("C:\\", "/mnt/c/")
                .replace("D:\\", "/mnt/d/")
                .replace("\\", "/");
    }
}
