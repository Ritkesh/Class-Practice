package com.optum.dms.pdfprocess.controller;

import com.optum.dms.pdfprocess.Entity.UploadResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.*;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.nio.file.Files;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@RestController
public class OcrController {

    @Value("${pdf.output.directory}")
    private String outputDirectory;

    @Value("${process.timeout.seconds}")
    private long processTimeoutSeconds;

    @Value("${pdf.useLocal}")
    private String useLocal;

    @Value("${pdf.local.directory}")
    private String localDirectory;

    private static final Logger logger = LoggerFactory.getLogger(OcrController.class);

    @GetMapping("/process-pdf-test-1")
    public ResponseEntity<Map<String, Object>> processPdfTest(@RequestParam String pdfName) {
        logger.info("Received request to process PDF: {}", pdfName);
        try {
            byte[] pdfBytes = new byte[0];
            if (Boolean.parseBoolean(useLocal)) {
                File sourceFile = new File(localDirectory, pdfName);
                if (!sourceFile.exists()) {
                    logger.error("Local PDF not found: {}", sourceFile.getAbsolutePath());
                    return new ResponseEntity<>(HttpStatus.NOT_FOUND);
                }
                logger.info("Loading PDF from local path: {}", sourceFile.getAbsolutePath());
                pdfBytes = Files.readAllBytes(sourceFile.toPath());
            }

            File inputPdf = File.createTempFile("input", ".pdf");
            try (FileOutputStream fos = new FileOutputStream(inputPdf)) {
                fos.write(pdfBytes);
            }
            logger.info("Saved PDF to temporary file: {}", inputPdf.getAbsolutePath());

            File outputPdf = new File(outputDirectory, pdfName.replace(".pdf", "_linearized.pdf"));
            String ocrMyPdfCommand = String.format("ocrmypdf --skip-text --rotate-pages --deskew --jobs 4 \"%s\" \"%s\"",
                    inputPdf.getAbsolutePath(), outputPdf.getAbsolutePath());

            ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", ocrMyPdfCommand);
            processBuilder.inheritIO();
            processBuilder.redirectErrorStream(true);
            Process process = processBuilder.start();
            logger.info("Started ocrmypdf process");

            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    logger.info(line);
                }
            }

            boolean finished = process.waitFor(processTimeoutSeconds, TimeUnit.SECONDS);
            if (!finished) {
                process.destroy();
                logger.error("ocrmypdf process timed out");
                return new ResponseEntity<>(HttpStatus.REQUEST_TIMEOUT);
            }
            if (process.exitValue() != 0) {
                logger.error("ocrmypdf process failed with exit code {}", process.exitValue());
                return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
            }

            logger.info("ocrmypdf process completed successfully");

            CompletableFuture.runAsync(() -> {
                try {
                    uploadToExternalApi(outputPdf);
                } catch (Exception e) {
                    logger.error("Async upload to external API failed", e);
                }
            });

            return new ResponseEntity<>(HttpStatus.OK);

        } catch (IOException | InterruptedException e) {
            logger.error("Error processing PDF: {}", pdfName, e);
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private void uploadToExternalApi(File file) {
//        String uploadUrl = "https://nuxeodev.optum.com/nuxeo/ui/#!/home";
        String uploadUrl = "https://nuxeodev.optum.com/nuxeo/api/v1/id/6cd7b9d9-9d1c-4075-a05c-4f8eb01db685";
        RestTemplate restTemplate = new RestTemplate();
        FileSystemResource resource = new FileSystemResource(file);

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("file", resource);

        HttpHeaders headers = new HttpHeaders();
        headers.setBasicAuth("dmsjadenx_nprd","prC1Y!ZU3%RU8stQ");
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        try {
//            ResponseEntity<UploadResponse> response = restTemplate.postForEntity(uploadUrl, requestEntity, UploadResponse.class);
            ResponseEntity<String> response = restTemplate.exchange(uploadUrl,HttpMethod.PUT, requestEntity, String.class);
            Pattern pattern = Pattern.compile("URL=([^\"])");
//            Matcher matcher = pattern.matcher(response.getBody());
//            if(matcher.find()){
//                String fullUrl = "https://nuxeodev.optum.com" + matcher.group(1);
//                logger.info("Uploaded file redirected to :{}",matcher.group(1));
//                logger.info("full accessible URL might be : {}",fullUrl);
//            } else{
//                logger.warn("could not extract redirect path from response");
//            }
//
//            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
////                UploadResponse uploadResponse = response.getBody();
////                if (uploadResponse.getFileUrl() != null) {
////                    logger.info("Uploaded PDF available at: {}", uploadResponse.getFileUrl());
////                } else if (uploadResponse.getPath() != null) {
////                    logger.info("Uploaded file path: {}", uploadResponse.getPath());
////                } else {
////                    logger.info("Upload successful but response lacks file path info.");
////                }
//                logger.info("Uploaded file path: {}", response.getBody());
//
//            } else {
//                logger.error("Failed to upload. Status: {}, Body: {}", response.getStatusCode(), response.getBody());
//            }
            logger.info("pdf uploaded successfully");

        } catch (Exception e) {
            logger.error("Exception during upload to external API", e);
        }
    }

    @PostMapping("/receive-file")
    public ResponseEntity<String> receiveFile(@RequestParam("file") MultipartFile file) {
        try {
            File destination = new File("/Users/Test/" + file.getOriginalFilename());
            destination.getParentFile().mkdirs();
            file.transferTo(destination);
            logger.info("File saved at: {}", destination.getAbsolutePath());
            return ResponseEntity.ok("File uploaded successfully.");
        } catch (IOException e) {
            logger.error("Failed to save file", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to save file");
        }
    }
}
