    public void uploadToExternalApi(File file, String path) {
        try {
            // Step 1: Get the batch ID
            String batchId = getBatchId();

            // Step 2: Upload the file (send raw bytes)
            uploadFile(batchId, file);

            // Step 3: Check upload status (optional)
            checkUploadStatus(batchId);

            // Step 4: Create the document at the specified path
            createDocument(path, batchId, file.getName());

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String getBatchId() throws JsonProcessingException {
        String url = "https://nuxeodev.optum.com/nuxeo/api/v1/upload";
        HttpHeaders headers = createAuthHeaders();
        HttpEntity<String> entity = new HttpEntity<>(headers);

        RestTemplate restTemplate = new RestTemplate();
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, entity, String.class);

        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode node = objectMapper.readTree(response.getBody());
        return node.path("batchId").asText();
    }

    private void uploadFile(String batchId, File file) throws IOException {
        String url = "https://nuxeodev.optum.com/nuxeo/api/v1/upload/" + batchId + "/0";

        HttpHeaders headers = createAuthHeaders();
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);

        byte[] fileBytes = Files.readAllBytes(file.toPath());

        HttpEntity<byte[]> entity = new HttpEntity<>(fileBytes, headers);
        RestTemplate restTemplate = new RestTemplate();

        restTemplate.exchange(url, HttpMethod.POST, entity, String.class);
    }

    private void checkUploadStatus(String batchId) {
        String url = "https://nuxeodev.optum.com/nuxeo/api/v1/upload/" + batchId;
        HttpHeaders headers = createAuthHeaders();
        HttpEntity<String> entity = new HttpEntity<>(headers);

        RestTemplate restTemplate = new RestTemplate();
        restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
    }

    private void createDocument(String path, String batchId, String fileName) {
        String url = "https://nuxeodev.optum.com/nuxeo/api/v1/path/" + path;
        HttpHeaders headers = createAuthHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        // Full request body to create a document from upload batch
        String requestBody = "{\n" +
                "  \"entity-type\": \"document\",\n" +
                "  \"name\": \"" + fileName + "\",\n" +
                "  \"type\": \"File\",\n" +
                "  \"properties\": {\n" +
                "    \"dc:title\": \"" + fileName + "\"\n" +
                "  },\n" +
                "  \"contextParameters\": {\n" +
                "    \"upload-batch\": {\n" +
                "      \"batchId\": \"" + batchId + "\",\n" +
                "      \"fileIdx\": 0\n" +
                "    }\n" +
                "  }\n" +
                "}";

        HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);
        RestTemplate restTemplate = new RestTemplate();

        restTemplate.exchange(url, HttpMethod.POST, entity, String.class);
    }

    private HttpHeaders createAuthHeaders() {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Basic " + encodeCredentials(username, password));
        headers.set("X-Upload-Type", "normal"); // Important for Nuxeo
        return headers;
    }

    private String encodeCredentials(String username, String password) {
        String credentials = username + ":" + password;
        return Base64.getEncoder().encodeToString(credentials.getBytes());
    }
