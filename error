import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.*;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import java.io.File;

public class OcrHandler {

    private String username = "your-username"; // Set your username
    private String password = "your-password"; // Set your password

    public void uploadToExternalApi(File file, String path) {
        try {
            // Step 1: Get the batch ID from the first API
            String batchId = getBatchId();

            // Step 2: Upload the file
            uploadFile(batchId, file);

            // Step 3: Check the upload status (Optional, can be used for monitoring)
            checkUploadStatus(batchId);

            // Step 4: Create the document in the specified path
            createDocument(path, batchId);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String getBatchId() throws JsonProcessingException {
        String url = "https://nuxeodev.optum.com/nuxeo/api/v1/upload";
        HttpHeaders headers = createAuthHeaders();
        HttpEntity<String> entity = new HttpEntity<>(headers);

        RestTemplate restTemplate = new RestTemplate();
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, entity, String.class);

        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode node = objectMapper.readTree(response.getBody());
        return node.path("batchId").asText();
    }

    private void uploadFile(String batchId, File file) {
        String url = "https://nuxeodev.optum.com/nuxeo/api/v1/upload/" + batchId + "/0";
        HttpHeaders headers = createAuthHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        // ✅ Correct: use FileSystemResource
        FileSystemResource fileResource = new FileSystemResource(file);

        // ✅ Correct: use MultiValueMap
        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("file", fileResource); // Use the correct key (usually "file")

        HttpEntity<MultiValueMap<String, Object>> entity = new HttpEntity<>(body, headers);

        RestTemplate restTemplate = new RestTemplate();
        restTemplate.exchange(url, HttpMethod.POST, entity, String.class);
    }

    private void checkUploadStatus(String batchId) {
        String url = "https://nuxeodev.optum.com/nuxeo/api/v1/upload/" + batchId;
        HttpHeaders headers = createAuthHeaders();
        HttpEntity<String> entity = new HttpEntity<>(headers);

        RestTemplate restTemplate = new RestTemplate();
        restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
    }

    private void createDocument(String path, String batchId) {
        String url = "https://nuxeodev.optum.com/nuxeo/api/v1/path/" + path;
        HttpHeaders headers = createAuthHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        // Constructing the JSON request body
        String requestBody = "{ \"batchId\": \"" + batchId + "\" }";
        HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);

        RestTemplate restTemplate = new RestTemplate();
        restTemplate.exchange(url, HttpMethod.POST, entity, String.class);
    }

    private HttpHeaders createAuthHeaders() {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Basic " + encodeCredentials(username, password));
        return headers;
    }

    private String encodeCredentials(String username, String password) {
        String credentials = username + ":" + password;
        return java.util.Base64.getEncoder().encodeToString(credentials.getBytes());
    }
}
