    public void processPdfTest(PdfDocument pdfDocument) {
        String pdfName = "input.pdf";
        logger.info("Received request to process PDF: {}", pdfName);

        try {
            byte[] pdfBytes = new byte[0];
            if (Boolean.parseBoolean(useLocal)) {
                File sourceFile = new File(localDirectory, pdfName);
                if (!sourceFile.exists()) {
                    logger.error("Local PDF not found: {}", sourceFile.getAbsolutePath());
                    return;
                }
                logger.info("Loading PDF from local path: {}", sourceFile.getAbsolutePath());
                pdfBytes = Files.readAllBytes(sourceFile.toPath());
            }

            // Save input PDF to temp file
            File inputPdf = File.createTempFile("input", ".pdf");
            try (FileOutputStream fos = new FileOutputStream(inputPdf)) {
                fos.write(pdfBytes);
            }
            File outputPdf = File.createTempFile("output", ".pdf");

            String ocrCommand = String.format(
                    "ocrmypdf --skip-text --rotate-pages --deskew --jobs 4 \"%s\" \"%s\"",
                    inputPdf.getAbsolutePath(), outputPdf.getAbsolutePath()
            );

            logger.info("Executing ocrmypdf command: {}", ocrCommand);

            ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", ocrCommand);
            processBuilder.redirectErrorStream(true);
            Process process = processBuilder.start();
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    logger.info(line);
                }
            }

            // Wait for process to complete
            boolean finished = process.waitFor(processTimeoutSeconds, TimeUnit.SECONDS);
            if (!finished) {
                process.destroy();
                logger.error("ocrmypdf process timed out");
                return;
            }

            if (process.exitValue() != 0) {
                logger.error("ocrmypdf process failed with exit code {}", process.exitValue());
                return;
            }

            logger.info("ocrmypdf process completed successfully. Uploading...");

            // Upload the final output file
            uploadToExternalApi(outputPdf);

        } catch (IOException | InterruptedException e) {
            logger.error("Error processing PDF: {}", pdfName, e);
        }
    }
