package com.optum.dms.pdfprocess.service;

import com.optum.dms.pdfprocess.entity.PdfMetaData;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
public class PdfMetadataExtractorService {
    private static final List<DateTimeFormatter> DATE_FORMATS = List.of(
            DateTimeFormatter.ofPattern("dd/MM/yyyy"),
            DateTimeFormatter.ofPattern("yyyy-MM-dd"),
            DateTimeFormatter.ofPattern("d MMM yyyy"),
            DateTimeFormatter.ofPattern("MMM d, yyyy"),
            DateTimeFormatter.ofPattern("dd.MM.yyyy"),
            DateTimeFormatter.ofPattern("dd-MMM-yyyy"),
            DateTimeFormatter.ofPattern("d-M-yy")
    );

    public Map<String, PdfMetaData> getMetaData(File file) throws IOException {
        PDDocument document = PDDocument.load(file);
        Map<String, PdfMetaData> metadata = new HashMap<>();

        Properties properties = new Properties();
        properties.load(new FileInputStream("src/main/resources/application.properties"));

        List<String> dobLabels = getLabels(properties.getProperty("labels.dob"));
        List<String> dosLabels = getLabels(properties.getProperty("labels.dos"));
        List<String> firstnameLabels = getLabels(properties.getProperty("labels.firstname"));
        List<String> middlenameLabels = getLabels(properties.getProperty("labels.middlename"));
        List<String> lastnameLabels = getLabels(properties.getProperty("labels.lastname")); // FIXED key

        Pattern datePattern = buildDatePattern(dobLabels, dosLabels);

        PDFTextStripper stripper = new PDFTextStripper();
        int totalPages = document.getNumberOfPages();

        for (int page = 1; page <= totalPages; page++) {
            stripper.setStartPage(page);
            stripper.setEndPage(page);
            String text = stripper.getText(document);

            // Extract names
            extractFieldByLabels(text, firstnameLabels, "First Name", metadata, page);
            extractFieldByLabels(text, middlenameLabels, "Middle Name", metadata, page);
            extractFieldByLabels(text, lastnameLabels, "Last Name", metadata, page);

            // Extract DOB / DOS
            Matcher dateMatcher = datePattern.matcher(text);
            while (dateMatcher.find()) {
                String label = dateMatcher.group(1).toUpperCase();
                String rawDate = dateMatcher.group(2);
                String parsedDate = normalizeDate(rawDate);

                if (parsedDate != null) {
                    if (label.contains("DOB") && !metadata.containsKey("DOB")) {
                        metadata.put("DOB", new PdfMetaData(parsedDate, page));
                    }
                    if (label.contains("DOS") && !metadata.containsKey("DOS")) {
                        metadata.put("DOS", new PdfMetaData(parsedDate, page));
                    }
                }
            }
        }

        document.close();
        metadata.forEach((key, entry) -> System.out.println(key + ": " + entry));
        return metadata;
    }

    private static void extractFieldByLabels(String text, List<String> labels, String key, Map<String, PdfMetaData> metadata, int page) {
        for (String label : labels) {
            Pattern pattern = Pattern.compile("(?i)" + Pattern.quote(label) + "\\s*[:\\-]?\\s*(\\w+(?:\\s\\w+)?)");
            Matcher matcher = pattern.matcher(text);
            if (matcher.find() && !metadata.containsKey(key)) {
                metadata.put(key, new PdfMetaData(matcher.group(1), page));
                break;
            }
        }
    }

    private static String normalizeDate(String dateStr) {
        String cleaned = dateStr.replaceAll("(st|nd|rd|th)", "").trim();
        for (DateTimeFormatter fmt : DATE_FORMATS) {
            try {
                return LocalDate.parse(cleaned, fmt).toString();
            } catch (DateTimeParseException ignored) {}
        }
        return null;
    }

    private static List<String> getLabels(String csv) {
        return csv == null ? List.of() : Arrays.stream(csv.split(","))
                .map(String::trim)
                .filter(s -> !s.isEmpty())
                .toList();
    }

    private static Pattern buildDatePattern(List<String> dobLabels, List<String> dosLabels) {
        Set<String> all = new HashSet<>();
        all.addAll(dobLabels);
        all.addAll(dosLabels);
        if (all.isEmpty()) return Pattern.compile("(?!)"); // always fail
        String joined = String.join("|", all).replaceAll("([\\W])", "\\\\$1");
        return Pattern.compile("(?i)(" + joined + ")\\s*[:;\\-]?\\s*([A-Za-z0-9,./-]+)");
    }
}
