
    public ResponseEntity<?> processPdfTest(String chartId) {
        log.info("Received request to process PDF: {}");

        try {
//                File sourceFile = getmmrFile(chartId, user);
                File sourceFile = new File("/Users/ritkesh_singh@optum.com/Downloads","Sample_MedicalRecord_Veradigm_Office_Visit_v4_PDF_20240417.pdf");
                if (!sourceFile.exists()) {
                    log.error("source PDF not found: {}", sourceFile.getAbsolutePath());
                    return new ResponseEntity<>(HttpStatus.NOT_FOUND);
                } else{
                    log.info("Loading PDF from source path: {}", sourceFile.getAbsolutePath());
                    byte[]pdfBytes = Files.readAllBytes(sourceFile.toPath());
                    File inputPdf = File.createTempFile("input", ".pdf");
                    try (FileOutputStream fos = new FileOutputStream(inputPdf)) {
                        fos.write(pdfBytes);
                    }
                    File outputPdf = File.createTempFile("output", "_linearized.pdf");

                    String ocrCommand = String.format(
                            "ocrmypdf --skip-text --rotate-pages --deskew --jobs 4 \"%s\" \"%s\"",
                            inputPdf.getAbsolutePath(), outputPdf.getAbsolutePath()
                    );

                    log.info("Executing ocrmypdf command: {}", ocrCommand);

                    ProcessBuilder processBuilder = new ProcessBuilder("bash", "-c", ocrCommand);
                    processBuilder.redirectErrorStream(true);
                    Process process = processBuilder.start();
                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                        String line;
                        while ((line = reader.readLine()) != null) {
                            log.info(line);
                        }
                    }
                    boolean finished = process.waitFor(processTimeoutSeconds, TimeUnit.SECONDS);
                    if (!finished) {
                        process.destroy();
                        log.error("ocrmypdf process timed out");
                        return new ResponseEntity<>(HttpStatus.GATEWAY_TIMEOUT);
                    }else if (process.exitValue() != 0) {
                        log.error("ocrmypdf process failed with exit code {}", process.exitValue());
                        return new ResponseEntity<>(HttpStatus.FAILED_DEPENDENCY);
                    } else{




                        // Linearize the output PDF in-place using QPDF
                        String linearizeCommand = String.format("qpdf --linearize --replace-input \"%s\"", outputPdf);
                        ProcessBuilder linearizeProcessBuilder = new ProcessBuilder("bash", "-c", linearizeCommand);
                        linearizeProcessBuilder.inheritIO();
                        linearizeProcessBuilder.redirectErrorStream(true);
                        Process linearizeProcess = linearizeProcessBuilder.start();
                        log.info("Started QPDF linearization process");

                        // Capture and log the QPDF linearization process output
                        try (BufferedReader reader = new BufferedReader(new InputStreamReader(linearizeProcess.getInputStream()))) {
                            String line;
                            while ((line = reader.readLine()) != null) {
                                log.info(line);
                            }
                        }

                        // Wait for QPDF linearization process to finish
                        boolean linearizationFinished = linearizeProcess.waitFor(processTimeoutSeconds, TimeUnit.SECONDS);
                        if (!linearizationFinished) {
                            linearizeProcess.destroy();
                            log.error("QPDF linearization process timed out");
                            return new ResponseEntity<>(HttpStatus.REQUEST_TIMEOUT);
                        }
                        if (linearizeProcess.exitValue() != 0) {
                            log.error("QPDF linearization process failed with exit code {}", linearizeProcess.exitValue());
                            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                        }
                        log.info("QPDF linearization process completed successfully");


//                        if(!isPdfLinearized(outputPdf)){
//                            log.warn("Waring: The output pdf is not linearized");
//                        }
                        log.info("ocrmypdf process completed successfully. Uploading...");
                        uploadToNuxeoClient(outputPdf,path);
            pdfMetadataExtractorService.getMetaData(outputPdf);
//                        testPdfMetadataExtractorService.getMetaData(outputPdf);
                    }
                }

        } catch (IOException | InterruptedException e) {
            log.error("Error processing PDF: {}", e.getMessage());
        }
        return new ResponseEntity<>(HttpStatus.OK);
    }
