//Code generated according to input schema and output schema
output_row.abs_path = input_row.abs_path;
output_row.dirname = input_row.dirname;
output_row.basename = input_row.basename;
output_row.mode_string = input_row.mode_string;
output_row.size = input_row.size;
output_row.mtime = input_row.mtime;
output_row.mtime_string = input_row.mtime_string;
output_row.chartFileName = input_row.chartFileName;
output_row._id = input_row._id;
output_row.patient = input_row.patient;
output_row.chartid = input_row.chartid;
output_row.lastName = input_row.lastName;
output_row.firstName = input_row.firstName;
output_row.middleName = input_row.middleName;
output_row.dob = input_row.dob;
output_row.dos = input_row.dos;
output_row.claim_id_new = input_row.claim_id_new;
//output_row.uuId = input_row.uuId;
//output_row.claim_nxuid = input_row.claim_nxuid;
//output_row.claim_nxpath = input_row.claim_nxpath;
//output_row.textExtract = input_row.textExtract;



///Custom code

// GET PDFTRON License
//PDFNet.initialize("OptumInsight Inc. (optum.com):ENTERP:GCM::WLM+:AMS(20230620):65F51C106AC67D0B5ACBC8B253184C01004F5DEB8D7B7C5496F43C6283F014E4BEF5C7");

PDFNet.initialize("Optum, Inc:ENTERP:GCM (Global Chart Management System)::WLM+:AMS(20240620):743A03FBE7965E23A8A2194F616F4C6DFDFCE195CDF6611CBF81F014E4BEF5C7");

System.out.println("pdftron home: " + context.pdfTronHome + context.ocrLibName);
//working code  11/13/2023
//PDFNet.addResourceSearchPath("/Users/flewis10/PDFNetJava/OCRModuleMac/Lib/");
//new code 11/13/2023
//PDFNet.addResourceSearchPath(context.pdfTronHome + "/PDFNetJava/OCRModuleMac/Lib/");
PDFNet.addResourceSearchPath(context.pdfTronHome + context.ocrLibName);







//context.ocrLib + "OCRModuleWindows/Lib/"
//"C:/PDFNetJava/OCRModuleWindows/Lib/"
//"/Users/flewis10/PDFNetJava/OCRModuleMac/Lib/OCRModule"

//"IRISOCRModuleWindows/Lib/"
//PDFNet.addResourceSearchPath("../../../Lib/");

			boolean use_Ocr = OCRModule.isModuleAvailable ();
			if( !OCRModule.isModuleAvailable() )
			{
				System.out.println("");
				System.out.println("Unable to run OCRTest: PDFTron SDK OCR module not available.");
				System.out.println("---------------------------------------------------------------");
				System.out.println("The OCR module is an optional add-on, available for download");
				System.out.println("at http://www.pdftron.com/. If you have already downloaded this");
				System.out.println("module, ensure that the SDK is able to find the required files");
				System.out.println("using the PDFNet.addResourceSearchPath() function.");
				System.out.println("");
				return;
			}

//Connection info
NuxeoClient client = (NuxeoClient)globalMap.get("nuxeoClient");
Repository repository = client.repository();

int retryCount = 3;

for (int i = 0; i < retryCount; i++)
{
	try {


// GET FILE NAME FOR FUTURE FILE BLOB
//String writeNuxeoFile = context.nuxeoOutBound + output_row.basename;
String writeNuxeoFile = output_row.abs_path;

String origExt = "";
String newFileName = "";
int filelen = 0;

filelen = output_row.basename.length();

origExt = output_row.basename.substring(filelen - 3,filelen);

newFileName = output_row.basename.substring(0, filelen - 4);
//System.out.println("new file nm = " + newFileName);


String filename1 = writeNuxeoFile;
String filename1A = output_row.basename;
String filename2 = newFileName + "_linearized.pdf";
String newTemp = context.mrmInbound + "Temp/";



//open pdf to inspect
PDFDoc linear = new PDFDoc(output_row.abs_path);
linear.initSecurityHandler();

//page orientation 12/13/2023
   boolean rotatePages = false;
   List<Integer> intArray30 = new ArrayList<Integer>(); //complex
   int page_numO = linear.getPageCount();
            for (int iO = 1; iO <= page_numO; ++iO) {
            //System.out.println("page#: " + iO);
            Page pageO = linear.getPage(iO);
			int originalRotation = pageO.getRotation();
			int rotation;

			//System.out.println("original rotation: " + originalRotation);
			if (originalRotation == 0) 
 				{}
 			else
 				{System.out.println("PAGE IS TURNED");
 				intArray30.add(originalRotation);
 				rotatePages = true;
 			    pageO.setRotation(0);}
            }
//end page orientation code

// B) Setup options with a single language and an ignore zone

OCROptions options = new OCROptions();
if(use_Ocr) options.setOCREngine("default");

//Date date = new Date();
Timestamp StartTime = new Timestamp(System.currentTimeMillis());
System.out.println("begin OCR: " + StartTime);
OCRModule.processPDF(linear, options);
Timestamp endTime = new Timestamp(System.currentTimeMillis());
System.out.println("end OCR: " + endTime);

//inspect pdf
boolean isLin;
//isLin = false;
isLin = linear.isLinearized();
System.out.println("is linear: " + isLin);


if (isLin == false)
{linear.save((newTemp + filename2), SDFDoc.SaveMode.LINEARIZED, null);
System.out.println("saving linear file");}
else
{linear.save((newTemp + filename2), SDFDoc.SaveMode.LINEARIZED, null);}
linear.close();
//doc.save(output_path + "german_kids_song.pdf", SDFDoc.SaveMode.LINEARIZED, null);
String filename2a = newTemp + filename2;

//ocr
//**************************************** text extraction begin ***************************

boolean example1_basic = false;
PDFDoc docL = new PDFDoc(filename2a);
docL.initSecurityHandler();

  Page page = docL.getPage(1);
       if (page == null)
        {System.out.println("Page not found.");}
       else
        {System.out.println("PAGE FOUND.");
         example1_basic = true;}

  //if (example1_basic)
  //{
    // Read every page
    /*for (PageIterator itr = docL.getPageIterator(); itr.hasNext(); ) {
         TextExtractor txt = new TextExtractor();
         txt.begin(itr.next());
         System.out.println("Word Count: " + txt.getWordCount());
         System.out.println("\n\n- GetAsText --------------------------\n" + txt.getAsText());
         System.out.println("-----------------------------------------------------------");
    }*/
  //}
//**************************************** text extraction end ***************************

//*************************************** text search begin ******************************
//  --  get DOS Dates -- 
String dosYear = output_row.dos.substring(0,4);
String dosYear1 = output_row.dos.substring(2,4);
String dosMonth = output_row.dos.substring(5,7);
String dosDay = output_row.dos.substring(8,10);
String dosDay1 = "";
String dosMonth1 = "";
String dosMonth2 = NuxeoUtil.getMonth(dosMonth);


if (dosDay.substring(0,1).equals("0"))
   {dosDay1 = dosDay.substring(1,2);}
else 
   {dosDay1 = dosDay;}

if (dosMonth.substring(0,1).equals("0"))
   {dosMonth1 = dosMonth.substring(1,2);}
else 
   {dosMonth1 = dosMonth;}
//  ----------------------
//yyyy dates
String dateYYYY1 = dosMonth + "/" + dosDay + "/" + dosYear; //  mm/dd/yyyy
String dateYYYY2 = dosMonth1 + "/" + dosDay1 + "/" + dosYear; //  m/d/yyyy
String dateYYYY3 = dosDay + "-" + dosMonth2 + "-" +  dosYear; //  dd-mon-yyyy
String dateYYYY4 = output_row.dos.substring(0,10); //  yyyy-mm-dd
String dateYYYY5 = dosMonth2 + " " + dosDay + ", " +   dosYear; //  MMM DD, YYYY
String dateYYYY6 = dosYear + "/" + dosMonth + "/" + dosDay; //  YYYY/MM/DD
String dateYYYY7 = dosYear + "-" + dosMonth + "-" + dosDay; //  YYYY-MM-DD
String dateYYYY8 = dosMonth + "-" + dosDay + "-" + dosYear; //  MM-DD-YYYY
//yy dates
String dateYY1 = dosMonth + "/" + dosDay + "/" + dosYear1; //  mm/dd/yyyy
String dateYY2 = dosMonth1 + "/" + dosDay1 + "/" + dosYear1; //  m/d/yyyy
String dateYY3 = dosDay + "-" + dosMonth2 + "-" +  dosYear1; //  dd-mon-yyyy



System.out.println("yyyy-mm-dd   = " + dateYYYY4);
System.out.println("mm/dd/yyyy   = " + dateYYYY1);
System.out.println("m/d/yyyy     = " + dateYYYY2);
System.out.println("dd-mon-yyyy  = " + dateYYYY3);
System.out.println("mm/dd/yy     = " + dateYY1);
System.out.println("m/d/yy       = " + dateYY2);
System.out.println("dd-mon-yy    = " + dateYY3);

//  --  get dob Dates -- 
String dobYear = output_row.dob.substring(0,4);
String dobYear1 = output_row.dob.substring(2,4);
String dobMonth = output_row.dob.substring(5,7);
String dobDay = output_row.dob.substring(8,10);
String dobDay1 = "";
String dobMonth1 = "";
String dobMonth2 = NuxeoUtil.getMonth(dobMonth);


if (dobDay.substring(0,1).equals("0"))
   {dobDay1 = dobDay.substring(1,2);}
else 
   {dobDay1 = dobDay;}

if (dobMonth.substring(0,1).equals("0"))
   {dobMonth1 = dobMonth.substring(1,2);}
else 
   {dobMonth1 = dobMonth;}
//  ----------------------
//yyyy dates
String dobYYYY1 = dobMonth + "/" + dobDay + "/" + dobYear; //  mm/dd/yyyy
String dobYYYY2 = dobMonth1 + "/" + dobDay1 + "/" + dobYear; //  m/d/yyyy
String dobYYYY3 = dobDay + "-" + dobMonth2 + "-" +  dobYear; //  dd-mon-yyyy
String dobYYYY4 = output_row.dob.substring(0,10); //  yyyy-mm-dd
//yy dates
String dobYY1 = dobMonth + "/" + dobDay + "/" + dobYear1; //  mm/dd/yyyy
String dobYY2 = dobMonth1 + "/" + dobDay1 + "/" + dobYear1; //  m/d/yyyy
String dobYY3 = dobDay + "-" + dobMonth2 + "-" +  dobYear1; //  dd-mon-yyyy



System.out.println("yyyy-mm-dd   = " + dobYYYY4);
System.out.println("mm/dd/yyyy   = " + dobYYYY1);
System.out.println("m/d/yyyy     = " + dobYYYY2);
System.out.println("dd-mon-yyyy  = " + dobYYYY3);
System.out.println("mm/dd/yy     = " + dobYY1);
System.out.println("m/d/yy       = " + dobYY2);
System.out.println("dd-mon-yy    = " + dobYY3);

 
 PDFDoc docS = new PDFDoc(filename2a);
 docS.initSecurityHandler();
 int mode = TextSearch.e_whole_word | TextSearch.e_page_stop;

 int PGCount = 0;
//********************************************** SEARCH LAST NAME ***************************************** 
 int prevPage = 0;
 boolean foundLastName = false;

 String pattern = output_row.lastName;
 //"talend_job";
 TextSearch txt_search = new TextSearch();
 
 if (example1_basic)
 {
  txt_search.begin(docS, pattern, mode, -1, -1 );
 }

 List<Integer> intArray1 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage != txt_search.getCurrentPage())
        { intArray1.add(txt_search.getCurrentPage());
          foundLastName = true;

          //System.out.println(txt_search.getCurrentPage() + "  found one instance: " + result.getResultStr());
        }
        prevPage = txt_search.getCurrentPage();
     }
     else
     {System.out.println("NO MATCH FOUND ON PAGE" + txt_search.getCurrentPage());
      PGCount = PGCount + 1;
      //if (PGCount > 25)

     if (txt_search.getCurrentPage() == 0)
      {break;}
      }
 }//end while

 

//********************************************** SEARCH FIRST NAME *****************************************
int prevPage2 = 0;
boolean foundFirstName = false;
String pattern2 = output_row.firstName;
TextSearch txt_search2 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search2.begin(docS, pattern2, mode, -1, -1 );
 }

 List<Integer> intArray2 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search2.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage2 != txt_search2.getCurrentPage())
        { intArray2.add(txt_search2.getCurrentPage());
          foundFirstName = true;
          //System.out.println(txt_search2.getCurrentPage() + "  found one instance: " + result.getResultStr());
        }
        prevPage2 = txt_search2.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE" + txt_search2.getCurrentPage());

     if (txt_search2.getCurrentPage() == 0)
      {break;}
      }
 }//end while
 
 //********************************************** SEARCH DOS Date1 *****************************************
int prevPage3 = 0;
boolean foundDosDate1 = false;
String pattern3 = dateYYYY1;
TextSearch txt_search3 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search3.begin(docS, pattern3, mode, -1, -1 );
 }

 List<Integer> intArray3 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search3.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage3 != txt_search3.getCurrentPage())
        { intArray3.add(txt_search3.getCurrentPage());
          foundDosDate1 = true;
          //System.out.println(txt_search3.getCurrentPage() + "  found one instance DOS 1: " + result.getResultStr());
        }
        prevPage3 = txt_search3.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOS 1: " + txt_search3.getCurrentPage());

     if (txt_search3.getCurrentPage() == 0)
      {break;}
      }
 }//end while
 
//********************************************** SEARCH DOS Date2 *****************************************
int prevPage4 = 0;
boolean foundDosDate2 = false;
String pattern4 = dateYYYY2;
TextSearch txt_search4 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search4.begin(docS, pattern4, mode, -1, -1 );
 }

 List<Integer> intArray4 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search4.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage4 != txt_search4.getCurrentPage())
        { intArray4.add(txt_search4.getCurrentPage());
          foundDosDate2 = true;
          //System.out.println(txt_search4.getCurrentPage() + "  found one instance DOS 2: " + result.getResultStr());
        }
        prevPage4 = txt_search4.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOS 2: " + txt_search4.getCurrentPage());

     if (txt_search4.getCurrentPage() == 0)
      {break;}
      }
 }//end while

//********************************************** SEARCH DOS Date3 *****************************************
int prevPage5 = 0;
boolean foundDosDate3 = false;
String pattern5 = dateYYYY3;
TextSearch txt_search5 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search5.begin(docS, pattern5, mode, -1, -1 );
 }

 List<Integer> intArray5 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search5.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage5 != txt_search5.getCurrentPage())
        { intArray5.add(txt_search5.getCurrentPage());
          foundDosDate3 = true;
          //System.out.println(txt_search5.getCurrentPage() + "  found one instance DOS 3: " + result.getResultStr());
        }
        prevPage5 = txt_search5.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOS 3: " + txt_search5.getCurrentPage());

     if (txt_search5.getCurrentPage() == 0)
      {break;}
      }
 }//end while

//********************************************** SEARCH DOS Date4 *****************************************
int prevPage6 = 0;
boolean foundDosDate4 = false;
String pattern6 = dateYYYY4;
TextSearch txt_search6 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search6.begin(docS, pattern6, mode, -1, -1 );
 }

 List<Integer> intArray6 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search6.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage6 != txt_search6.getCurrentPage())
        { intArray6.add(txt_search6.getCurrentPage());
          foundDosDate4 = true;
          //System.out.println(txt_search6.getCurrentPage() + "  found one instance DOS 4: " + result.getResultStr());
        }
        prevPage6 = txt_search6.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOS 4: " + txt_search6.getCurrentPage());

     if (txt_search6.getCurrentPage() == 0)
      {break;}
      }
 }//end while
//********************************************** SEARCH DOS Date5 *****************************************
int prevPage7 = 0;
boolean foundDosDate5 = false;
String pattern7 = dateYY1;
TextSearch txt_search7 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search7.begin(docS, pattern7, mode, -1, -1 );
 }

 List<Integer> intArray7 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search7.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage7 != txt_search7.getCurrentPage())
        { intArray7.add(txt_search7.getCurrentPage());
          foundDosDate5 = true;
          //System.out.println(txt_search7.getCurrentPage() + "  found one instance DOS 5: " + result.getResultStr());
        }
        prevPage7 = txt_search7.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOS 5: " + txt_search7.getCurrentPage());

     if (txt_search7.getCurrentPage() == 0)
      {break;}
      }
 }//end while
 
//********************************************** SEARCH DOS Date6 *****************************************
int prevPage8 = 0;
boolean foundDosDate6 = false;
String pattern8 = dateYY2;
TextSearch txt_search8 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search8.begin(docS, pattern8, mode, -1, -1 );
 }

 List<Integer> intArray8 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search8.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage8 != txt_search8.getCurrentPage())
        { intArray8.add(txt_search8.getCurrentPage());
          foundDosDate6 = true;
          //System.out.println(txt_search8.getCurrentPage() + "  found one instance DOS 6: " + result.getResultStr());
        }
        prevPage8 = txt_search8.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOS 6: " + txt_search8.getCurrentPage());

     if (txt_search8.getCurrentPage() == 0)
      {break;}
      }
 }//end while

//********************************************** SEARCH DOS Date7 *****************************************
int prevPage9 = 0;
boolean foundDosDate7 = false;
String pattern9 = dateYY3;
TextSearch txt_search9 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search9.begin(docS, pattern9, mode, -1, -1 );
 }

 List<Integer> intArray9 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search9.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage9 != txt_search9.getCurrentPage())
        { intArray9.add(txt_search9.getCurrentPage());
          foundDosDate7 = true;
          //System.out.println(txt_search9.getCurrentPage() + "  found one instance DOS 7: " + result.getResultStr());
        }
        prevPage9 = txt_search9.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOS 7: " + txt_search9.getCurrentPage());

     if (txt_search9.getCurrentPage() == 0)
      {break;}
      }
 }//end while
 
//********************************************** SEARCH DOB Date1 *****************************************
int prevPage10 = 0;
boolean foundDobDate1 = false;
String pattern10 = dobYYYY1;
TextSearch txt_search10 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search10.begin(docS, pattern10, mode, -1, -1 );
 }

 List<Integer> intArray10 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search10.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage10 != txt_search10.getCurrentPage())
        { intArray10.add(txt_search10.getCurrentPage());
          foundDobDate1 = true;
          //System.out.println(txt_search10.getCurrentPage() + "  found one instance DOB 1: " + result.getResultStr());
        }
        prevPage10 = txt_search10.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOB 1" + txt_search10.getCurrentPage());

     if (txt_search10.getCurrentPage() == 0)
      {break;}
      }
 }//end while
 
//********************************************** SEARCH DOB Date2 *****************************************
int prevPage11 = 0;
boolean foundDobDate2 = false;
String pattern11 = dobYYYY2;
TextSearch txt_search11 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search11.begin(docS, pattern11, mode, -1, -1 );
 }

 List<Integer> intArray11 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search11.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage11 != txt_search11.getCurrentPage())
        { intArray11.add(txt_search11.getCurrentPage());
          foundDobDate2 = true;
          //System.out.println(txt_search11.getCurrentPage() + "  found one instance DOB 2: " + result.getResultStr());
        }
        prevPage11 = txt_search11.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOB 2" + txt_search11.getCurrentPage());

     if (txt_search11.getCurrentPage() == 0)
      {break;}
      }
 }//end while

//********************************************** SEARCH DOB Date3 *****************************************
int prevPage12 = 0;
boolean foundDobDate3 = false;
String pattern12 = dobYYYY3;
TextSearch txt_search12 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search12.begin(docS, pattern12, mode, -1, -1 );
 }

 List<Integer> intArray12 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search12.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage12 != txt_search12.getCurrentPage())
        { intArray12.add(txt_search12.getCurrentPage());
          foundDobDate3 = true;
          //System.out.println(txt_search12.getCurrentPage() + "  found one instance DOB 3: " + result.getResultStr());
        }
        prevPage12 = txt_search12.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOB 3" + txt_search12.getCurrentPage());

     if (txt_search12.getCurrentPage() == 0)
      {break;}
      }
 }//end while

//********************************************** SEARCH DOB Date4 *****************************************
int prevPage13 = 0;
boolean foundDobDate4 = false;
String pattern13 = dobYYYY4;
TextSearch txt_search13 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search13.begin(docS, pattern13, mode, -1, -1 );
 }

 List<Integer> intArray13 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search13.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage13 != txt_search13.getCurrentPage())
        { intArray13.add(txt_search13.getCurrentPage());
          foundDobDate4 = true;
          //System.out.println(txt_search13.getCurrentPage() + "  found one instance DOB 4: " + result.getResultStr());
        }
        prevPage13 = txt_search13.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOB 4" + txt_search13.getCurrentPage());

     if (txt_search13.getCurrentPage() == 0)
      {break;}
      }
 }//end while

//********************************************** SEARCH DOB Date5 *****************************************
int prevPage14 = 0;
boolean foundDobDate5 = false;
String pattern14 = dobYY1;
TextSearch txt_search14 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search14.begin(docS, pattern14, mode, -1, -1 );
 }

 List<Integer> intArray14 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search14.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage14 != txt_search14.getCurrentPage())
        { intArray14.add(txt_search14.getCurrentPage());
          foundDobDate5 = true;
          //System.out.println(txt_search14.getCurrentPage() + "  found one instance DOB 5: " + result.getResultStr());
        }
        prevPage14 = txt_search14.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOB 5" + txt_search14.getCurrentPage());

     if (txt_search14.getCurrentPage() == 0)
      {break;}
      }
 }//end while
 
//********************************************** SEARCH DOB Date6 *****************************************
int prevPage15 = 0;
boolean foundDobDate6 = false;
String pattern15 = dobYY2;
TextSearch txt_search15 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search15.begin(docS, pattern15, mode, -1, -1 );
 }

 List<Integer> intArray15 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search15.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage15 != txt_search15.getCurrentPage())
        { intArray15.add(txt_search15.getCurrentPage());
          foundDobDate6 = true;
          //System.out.println(txt_search15.getCurrentPage() + "  found one instance DOB 6: " + result.getResultStr());
        }
        prevPage15 = txt_search15.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOB 6" + txt_search15.getCurrentPage());

     if (txt_search15.getCurrentPage() == 0)
      {break;}
      }
 }//end while

//********************************************** SEARCH DOB Date7 *****************************************
int prevPage16 = 0;
boolean foundDobDate7 = false;
String pattern16 = dobYY3;
TextSearch txt_search16 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search16.begin(docS, pattern16, mode, -1, -1 );
 }

 List<Integer> intArray16 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search16.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage16 != txt_search16.getCurrentPage())
        { intArray16.add(txt_search16.getCurrentPage());
          foundDobDate7 = true;
          //System.out.println(txt_search16.getCurrentPage() + "  found one instance DOB 7: " + result.getResultStr());
        }
        prevPage16 = txt_search16.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOB 7" + txt_search16.getCurrentPage());

     if (txt_search16.getCurrentPage() == 0)
      {break;}
      }
 }//end while
 
//********************************************** SEARCH DOS Date8 *****************************************
int prevPage17 = 0;
boolean foundDosDate8 = false;
String pattern17 = dateYYYY5;
TextSearch txt_search17 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search17.begin(docS, pattern17, mode, -1, -1 );
 }

 List<Integer> intArray17 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search17.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage17 != txt_search17.getCurrentPage())
        { intArray17.add(txt_search17.getCurrentPage());
          foundDosDate8 = true;
          //System.out.println(txt_search17.getCurrentPage() + "  found one instance DOS 8: " + result.getResultStr());
        }
        prevPage17 = txt_search17.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOS 8" + txt_search17.getCurrentPage());

     if (txt_search17.getCurrentPage() == 0)
      {break;}
      }
 }//end while

//********************************************** SEARCH DOS Date9 *****************************************
int prevPage18 = 0;
boolean foundDosDate9 = false;
String pattern18 = dateYYYY6;
TextSearch txt_search18 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search18.begin(docS, pattern18, mode, -1, -1 );
 }

 List<Integer> intArray18 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search18.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage18 != txt_search18.getCurrentPage())
        { intArray18.add(txt_search18.getCurrentPage());
          foundDosDate9 = true;
          //System.out.println(txt_search18.getCurrentPage() + "  found one instance DOS 9: " + result.getResultStr());
        }
        prevPage18 = txt_search18.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOS 9" + txt_search18.getCurrentPage());

     if (txt_search18.getCurrentPage() == 0)
      {break;}
      }
 }//end while
//********************************************** SEARCH DOS Date10 *****************************************
int prevPage19 = 0;
boolean foundDosDate10 = false;
String pattern19 = dateYYYY7;
TextSearch txt_search19 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search19.begin(docS, pattern19, mode, -1, -1 );
 }

 List<Integer> intArray19 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search19.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage19 != txt_search19.getCurrentPage())
        { intArray19.add(txt_search19.getCurrentPage());
          foundDosDate10 = true;
          //System.out.println(txt_search19.getCurrentPage() + "  found one instance DOS 10: " + result.getResultStr());
        }
        prevPage19 = txt_search19.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOS 10" + txt_search19.getCurrentPage());

     if (txt_search19.getCurrentPage() == 0)
      {break;}
      }
 }//end while
//********************************************** SEARCH DOS Date11 *****************************************
int prevPage20 = 0;
boolean foundDosDate11 = false;
String pattern20 = dateYYYY8;
TextSearch txt_search20 = new TextSearch();
 
 if (example1_basic)
 {
  txt_search20.begin(docS, pattern20, mode, -1, -1 );
 }

 List<Integer> intArray20 = new ArrayList<Integer>(); //complex

 while ( true )
 {
     TextSearchResult result = txt_search20.run();

     if ( result.getCode() == TextSearchResult.e_found )
     { if (prevPage20 != txt_search20.getCurrentPage())
        { intArray20.add(txt_search20.getCurrentPage());
          foundDosDate11 = true;
          //System.out.println(txt_search20.getCurrentPage() + "  found one instance DOS 11: " + result.getResultStr());
        }
        prevPage20 = txt_search20.getCurrentPage();
     }
     else
     {
     //System.out.println("NO MATCH FOUND ON PAGE DOS 11" + txt_search20.getCurrentPage());

     if (txt_search20.getCurrentPage() == 0)
      {break;}
      }
 }//end while
//*************************************** text search end ******************************

//} // end if page



//*************************************** nuxeo procedures ******************************


		//begin Nuxeo
	   BatchUploadManager batchUploadManager = client.batchUploadManager();
       BatchUpload batchUpload = batchUploadManager.createBatch().enableChunk();

       assertNotNull(batchUpload);
       String batchId = batchUpload.getBatchId();
       assertNotNull(batchId);

       //orig file
       Blob fileBlob = new FileBlob(new File (writeNuxeoFile));
       batchUpload = batchUpload.upload("1", fileBlob);

       String mrmComment = "MRM Batch Load";
       String type = "MedicalRecord";
       String source_id = "MRM";

       //code for complex data type begin
       List<Map<String, Object>> complexValuesList = new ArrayList<Map<String, Object>>();
       Map<String, Object> complexValue = new HashMap<String, Object>();
       complexValue.put("key", "chartid");
       complexValue.put("value", output_row.chartid);
       complexValuesList.add(complexValue);
       //code for complex data type end

       String lastName = output_row.lastName;
       String firstName = output_row.firstName;
       String dateOfBirth = output_row.dob;
       
	   
	   Document medicalrecord = Document.createWithName(output_row.basename, "MedicalRecord");
       medicalrecord.setPropertyValue("dc:title", output_row.basename);
       medicalrecord.setPropertyValue("dc:description", mrmComment);
       medicalrecord.setPropertyValue("med_rec_src:source_id", source_id);
       medicalrecord.setPropertyValue("med_rec_src:source_keys", complexValuesList);
       medicalrecord.setPropertyValue("med_rec:pat_last_name", lastName);
       medicalrecord.setPropertyValue("med_rec:isActive", true);
       medicalrecord.setPropertyValue("med_rec:pat_first_name", firstName);
       medicalrecord.setPropertyValue("med_rec:pat_dob", dateOfBirth);
       medicalrecord.setPropertyValue("file:content", batchUpload.getBatchBlob());
       medicalrecord = repository.createDocumentByPath("/MRR/Records", medicalrecord);


       // Get Nuxeo document property after initial update
       String nuxeoDetail = medicalrecord.getProperties().toString(); //Set Property string
       //System.out.println("Nuxeo Doc Property: " + nuxeoDetail);
       String UUID = medicalrecord.getId();
       System.out.println("Got UUID: " + UUID);
     if (UUID == null) {
		System.out.println("File named: " + writeNuxeoFile + " did no update");}
	 else
	 {
       String filePath = medicalrecord.getPath();

       // begin secondary uploads
       Document doc = client.repository().fetchDocumentByPath(filePath);

        /* //ADDITIONAL CODE
		Document doc = client.repository().fetchDocumentByPath(filePath);
        String title = doc.getPropertyValue("dc:title"); // should be equal to "Domain"
        System.out.println("Title: " + title);
        // Operation Document.Update
        doc = client.operation("Document.Update")
                .param("properties", "dc:nature=card")
                .input(doc.getPath())
                .execute();*/


       	// Operation Attach Blob with BatchUpload
        // Upload file
        BatchUpload batchUpload2 = batchUploadManager.createBatch().enableChunk();
        assertNotNull(batchUpload2);
        File file2 = new File(filename2a);
        FileBlob fileBlob2 = new FileBlob(file2);
        batchUpload2 = batchUpload2.upload("1", fileBlob2);



        Blob blob = batchUpload2.operation(BLOB_ATTACH_ON_DOCUMENT)
                .param("document", doc.getPath())
                .param("xpath", "files:files")
                .execute();
                
                
        //declare list
        List<Map<String, Object>> complexValuesList1 = new ArrayList<Map<String, Object>>();
        boolean addSearchTerms = false;
        //last name
        if (foundLastName) { addSearchTerms = true;       
          Map<String, Object> complexValue1 = new HashMap<String, Object>();
          complexValue1.put("search_term", output_row.lastName);
          complexValue1.put("search_term_label", "PATIENT_LAST_NAME=" + output_row.lastName);
          complexValue1.put("pages", intArray1);
          complexValuesList1.add(complexValue1);}
        //first name
        if (foundFirstName) { addSearchTerms = true;
        Map<String, Object> complexValue2 = new HashMap<String, Object>();
        complexValue2.put("search_term", output_row.firstName);
        complexValue2.put("search_term_label", "PATIENT_FIRST_NAME=" + output_row.firstName);
        complexValue2.put("pages", intArray2);
        complexValuesList1.add(complexValue2);}
        //DOS mm/dd/yyyy
         if (foundDosDate1) { addSearchTerms = true;
         Map<String, Object> complexValue3 = new HashMap<String, Object>();
         complexValue3.put("search_term", dateYYYY1);
         complexValue3.put("search_term_label", "PATIENT_DOS=" + dateYYYY1);
         complexValue3.put("pages", intArray3);
         complexValuesList1.add(complexValue3);}
         //DOS m/d/yyyy
         if (foundDosDate2) { addSearchTerms = true;
         Map<String, Object> complexValue4 = new HashMap<String, Object>();
         complexValue4.put("search_term", dateYYYY2);
         complexValue4.put("search_term_label", "PATIENT_DOS=" + dateYYYY2);
         complexValue4.put("pages", intArray4);
         complexValuesList1.add(complexValue4);}
         //DOS dd-mon-yyyy
         if (foundDosDate3) { addSearchTerms = true;
         Map<String, Object> complexValue5 = new HashMap<String, Object>();
         complexValue5.put("search_term", dateYYYY3);
         complexValue5.put("search_term_label", "PATIENT_DOS=" + dateYYYY3);
         complexValue5.put("pages", intArray5);
         complexValuesList1.add(complexValue5);}
         //DOS dd-mon-yyyy
         if (foundDosDate4) { addSearchTerms = true;
         Map<String, Object> complexValue6 = new HashMap<String, Object>();
         complexValue6.put("search_term", dateYYYY4);
         complexValue6.put("search_term_label", "PATIENT_DOS=" + dateYYYY4);
         complexValue6.put("pages", intArray6);
         complexValuesList1.add(complexValue6);}
         //DOS mm/dd/yy
         if (foundDosDate5) { addSearchTerms = true;
         Map<String, Object> complexValue7 = new HashMap<String, Object>();
         complexValue7.put("search_term", dateYY1);
         complexValue7.put("search_term_label", "PATIENT_DOS=" + dateYY1);
         complexValue7.put("pages", intArray7);
         complexValuesList1.add(complexValue7);}         
         //Dos  m/d/yy
         if (foundDosDate6) { addSearchTerms = true;
         Map<String, Object> complexValue8 = new HashMap<String, Object>();
         complexValue8.put("search_term", dateYY2);
         complexValue8.put("search_term_label", "PATIENT_DOS=" + dateYY2);
         complexValue8.put("pages", intArray8);
         complexValuesList1.add(complexValue8);}  

         //Dos  dd-mon-yy
         if (foundDosDate7) { addSearchTerms = true;
         Map<String, Object> complexValue9 = new HashMap<String, Object>();
         complexValue9.put("search_term", dateYY3);
         complexValue9.put("search_term_label", "PATIENT_DOS=" + dateYY3);
         complexValue9.put("pages", intArray9);
         complexValuesList1.add(complexValue9);} 
         

         
         //Dos  MMM DD, YYYY
         if (foundDosDate8) { addSearchTerms = true;
         Map<String, Object> complexValue10 = new HashMap<String, Object>();
         complexValue10.put("search_term", dateYYYY5);
         complexValue10.put("search_term_label", "PATIENT_DOS=" + dateYYYY5);
         complexValue10.put("pages", intArray17);
         complexValuesList1.add(complexValue10);} 

         //Dos  YYYY/MM/DD
         if (foundDosDate9) { addSearchTerms = true;
         Map<String, Object> complexValue11 = new HashMap<String, Object>();
         complexValue11.put("search_term", dateYYYY6);
         complexValue11.put("search_term_label", "PATIENT_DOS=" + dateYYYY6);
         complexValue11.put("pages", intArray18);
         complexValuesList1.add(complexValue11);} 

         //Dos  YYYY-MM-DD
         if (foundDosDate10) { addSearchTerms = true;
         Map<String, Object> complexValue12 = new HashMap<String, Object>();
         complexValue12.put("search_term", dateYYYY7);
         complexValue12.put("search_term_label", "PATIENT_DOS=" + dateYYYY7);
         complexValue12.put("pages", intArray19);
         complexValuesList1.add(complexValue12);} 

         //Dos  MM-DD-YYYY
         if (foundDosDate11) { addSearchTerms = true;
         Map<String, Object> complexValue13 = new HashMap<String, Object>();
         complexValue13.put("search_term", dateYYYY8);
         complexValue13.put("search_term_label", "PATIENT_DOS=" + dateYYYY8);
         complexValue13.put("pages", intArray20);
         complexValuesList1.add(complexValue13);}    
         
        //DOB mm/dd/yyyy
         if (foundDobDate1) { addSearchTerms = true;
         Map<String, Object> complexValue14 = new HashMap<String, Object>();
         complexValue14.put("search_term", dobYYYY1);
         complexValue14.put("search_term_label", "PATIENT_DOB=" + dobYYYY1);
         complexValue14.put("pages", intArray10);
         complexValuesList1.add(complexValue14);}
         //DOB m/d/yyyy
         if (foundDobDate2) { addSearchTerms = true;
         Map<String, Object> complexValue15 = new HashMap<String, Object>();
         complexValue15.put("search_term", dobYYYY2);
         complexValue15.put("search_term_label", "PATIENT_DOB=" + dobYYYY2);
         complexValue15.put("pages", intArray11);
         complexValuesList1.add(complexValue15);}
         //DOB dd-mon-yyyy
         if (foundDobDate3) { addSearchTerms = true;
         Map<String, Object> complexValue16 = new HashMap<String, Object>();
         complexValue16.put("search_term", dobYYYY3);
         complexValue16.put("search_term_label", "PATIENT_DOB=" + dobYYYY3);
         complexValue16.put("pages", intArray12);
         complexValuesList1.add(complexValue16);}
         //DOB dd-mon-yyyy
         if (foundDobDate4) { addSearchTerms = true;
         Map<String, Object> complexValue17 = new HashMap<String, Object>();
         complexValue17.put("search_term", dobYYYY4);
         complexValue17.put("search_term_label", "PATIENT_DOB=" + dobYYYY4);
         complexValue17.put("pages", intArray13);
         complexValuesList1.add(complexValue17);}
         //DOB mm/dd/yy
         if (foundDobDate5) { addSearchTerms = true;
         Map<String, Object> complexValue18 = new HashMap<String, Object>();
         complexValue18.put("search_term", dobYY1);
         complexValue18.put("search_term_label", "PATIENT_DOB=" + dobYY1);
         complexValue18.put("pages", intArray14);
         complexValuesList1.add(complexValue18);}         
         //Dob  m/d/yyyy
         if (foundDobDate6) { addSearchTerms = true;
         Map<String, Object> complexValue19 = new HashMap<String, Object>();
         complexValue19.put("search_term", dobYY2);
         complexValue19.put("search_term_label", "PATIENT_DOB=" + dobYY2);
         complexValue19.put("pages", intArray15);
         complexValuesList1.add(complexValue19);}  

         //Dob  dd-mon-yyyy
         if (foundDobDate7) { addSearchTerms = true;
         Map<String, Object> complexValue20 = new HashMap<String, Object>();
         complexValue20.put("search_term", dobYY3);
         complexValue20.put("search_term_label", "PATIENT_DOB=" + dobYY3);
         complexValue20.put("pages", intArray16);
         complexValuesList1.add(complexValue20);} 
                        
         
         
         String searchAnalytics = "";
         searchAnalytics = "lastName=" + foundLastName + ",";
         searchAnalytics = searchAnalytics + "firstName=" + foundFirstName + ",";
         searchAnalytics = searchAnalytics + "dos mm/dd/yyyy=" + foundDosDate1 + ",";
         searchAnalytics = searchAnalytics + "dos m/d/yyyy=" + foundDosDate2 + ",";
         searchAnalytics = searchAnalytics + "dos dd-mon-yyyy=" + foundDosDate3 + ",";
         searchAnalytics = searchAnalytics + "dos yyyy-mm-dd=" + foundDosDate4 + ",";
         searchAnalytics = searchAnalytics + "dos mm/dd/yy=" + foundDosDate5 + ",";
         searchAnalytics = searchAnalytics + "dos m/d/yy=" + foundDosDate6 + ",";
         searchAnalytics = searchAnalytics + "dos dd-mon-yy=" + foundDosDate7 + ",";
		 searchAnalytics = searchAnalytics + "dos MMM DD, YYYY=" + foundDosDate8 + ",";
		 searchAnalytics = searchAnalytics + "dos YYYY/MM/DD=" + foundDosDate9 + ",";
		 searchAnalytics = searchAnalytics + "dos YYYY-MM-DD=" + foundDosDate10 + ",";
		 searchAnalytics = searchAnalytics + "dos MM-DD-YYYY=" + foundDosDate11 + ",";
         searchAnalytics = searchAnalytics + "dob mm/dd/yyyy=" + foundDobDate1 + ",";
         searchAnalytics = searchAnalytics + "dob m/d/yyyy=" + foundDobDate2 + ",";
         searchAnalytics = searchAnalytics + "dob dd-mon-yyyy=" + foundDobDate3 + ",";
         searchAnalytics = searchAnalytics + "dob yyyy-mm-dd=" + foundDobDate4 + ",";
         searchAnalytics = searchAnalytics + "dob mm/dd/yy=" + foundDobDate5 + ",";
         searchAnalytics = searchAnalytics + "dob m/d/yy=" + foundDobDate6 + ",";
         searchAnalytics = searchAnalytics + "dob dd-mon-yy=" + foundDobDate7 + ",";
         searchAnalytics = searchAnalytics + "OCR start time=" + StartTime + ",";
         searchAnalytics = searchAnalytics + "OCR end time=" + endTime + ",";
         searchAnalytics = searchAnalytics + "rotate pages=" + rotatePages + ",";
         
         
         output_row.textExtract = searchAnalytics;
         output_row.uuId = UUID;
         output_row.claim_nxuid = UUID;
         output_row.claim_nxpath = filePath;
         

         
         //page orientation code 12/13/2023
         
        //declare list
        List<Map<String, Object>> complexValuesList30 = new ArrayList<Map<String, Object>>();
        boolean addPageRotate = false;
        //Rotate Page
        if (rotatePages) { addPageRotate = true;       
          Map<String, Object> complexValue30 = new HashMap<String, Object>();
          complexValue30.put("username", "flewis10");
          complexValue30.put("label", "page_rotated");
          complexValuesList30.add(complexValue30);}

                
        // begin secondary uploads
       Document docZ = client.repository().fetchDocumentByPath(filePath);
                
	    //Add Facet -> HasSearchTermPageIndex
        client.operation("Document.AddFacet")
                .input(docZ.getPath())
                .param("facet", "HasPageSearchIndex")
                .voidOperation(true) // allows to not download blob in response
               .execute();
	   
       if (addSearchTerms)
       {docZ.setPropertyValue("page_search_index:search_terms", complexValuesList1);}
        //docZ.updateDocument();
       
       if (addPageRotate)
       {docZ.setPropertyValue("nxtag:tags", complexValuesList30);}

       if (addSearchTerms || addPageRotate)
       {docZ.updateDocument();}

        // Operation CheckIn
        /*Document version = client.operation("Document.CheckIn")
                .input(doc.getPath())
                .context("version", "major")
                .execute();*/
                

       System.out.println("Finished writing Nuxeo file: " + writeNuxeoFile);

       //System.out.println("**** FML *** File named: " + writeNuxeoFile + " updates");

       System.out.println("Start mongo: " + UUID);
       //begin Mongo upsert
	   DBCollection claims = (DBCollection)globalMap.get("claims");
       ArrayList history = null;
       BasicDBObject Query = new BasicDBObject();
	   BasicDBObject fileMeta = new BasicDBObject();
       fileMeta.append("$set", new BasicDBObject("claim_nxuid", UUID)
	   .append("claim_nxpath", filePath));
	   Query.append("_id", new ObjectId(output_row._id));
	   System.out.println(claims.update(Query, fileMeta, true, false));
	   
	 }//end uuid if logic

  i = retryCount;
	}	catch (Exception ex) {

		  		//System.out.println("Error writing to Nuxeo: " + (String)globalMap.get("tFileList_1_CURRENT_FILEPATH") + " on //try number: " + i);

		  		System.out.println("Exception is: " + ex);

		  		Thread.sleep(5000);

		  		if (i == (retryCount - 1)) {
		  		   System.out.println("Unable to write to Nuxeo. Ending program.");
		  			 System.exit(1);
		  		}
		}
}


