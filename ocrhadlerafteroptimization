package com.optum.dms.pdfprocess.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.optum.dms.pdfprocess.entity.*;
import lombok.extern.slf4j.Slf4j;
import org.apache.pdfbox.contentstream.operator.Operator;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.contentstream.PDFStreamEngine;
import org.apache.pdfbox.cos.COSBase;
import org.apache.pdfbox.cos.COSName;
import org.apache.pdfbox.pdmodel.graphics.PDXObject;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;
import org.apache.pdfbox.text.PDFTextStripper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.util.FileSystemUtils;
import org.springframework.web.client.RestTemplate;

import java.io.*;
import java.net.URI;
import java.nio.file.Files;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

@Slf4j
@Service
public class OcrHandler {

    @Value("${process.timeout.seconds}")
    private long processTimeoutSeconds;

    @Value("${application.user}")
    private String user;

    @Value("${pdf.url}")
    private String pdfUrl;

    @Value("${nuxeo.username}")
    private String username;

    @Value("${nuxeo.password}")
    private String password;

    @Value("${file.url}")
    private String fileUrl;

    @Value("${nuxeo.file.path}")
    private String path;

    @Autowired
    PdfMetadataExtractorService pdfMetadataExtractorService;

    @Autowired
    TestPdfMetadataExtractorService testPdfMetadataExtractorService;

    @Autowired
    private OcrPdfService ocrPdfService;

    /**
     * Core method with selective OCR on image pages.
     */
    public ResponseEntity<?> processPdfTest(String chartId, String forceOcr, Claims claims) {
        log.info("Received request to process PDF: {}", chartId);

        File tempDir = null;
        File inputPdf = null;
        File outputPdf = null;
        PDDocument document = null;

        try {
            File sourceFile = ocrPdfService.getTestFile(chartId);
            if (!sourceFile.exists()) {
                log.error("Source PDF not found: {}", sourceFile.getAbsolutePath());
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }

            tempDir = Files.createTempDirectory("ocr_temp").toFile();

            inputPdf = new File(tempDir, "input.pdf");
            Files.copy(sourceFile.toPath(), inputPdf.toPath());

            outputPdf = new File(tempDir, "output.pdf");

            document = PDDocument.load(inputPdf);
            int totalPages = document.getNumberOfPages();

            // Detect image pages
            Set<Integer> imagePages = new HashSet<>();
            for (int i = 0; i < totalPages; i++) {
                PDPage page = document.getPage(i);
                ImageDetectionEngine engine = new ImageDetectionEngine();
                engine.processPage(page);
                String extractedText = tryExtractText(inputPdf);
                if (engine.containsImage() || extractedText.isEmpty()) {
                    imagePages.add(i + 1); // 1-based for ocrmypdf
                }
            }

            String ocrOptions;
            int jobs = 4;
            if ("true".equalsIgnoreCase(forceOcr)) {
                // Force OCR all pages
                ocrOptions = "--force-ocr";
            } else if (imagePages.isEmpty()) {
                // Try extracting some text as a test
                    // No text detected, force OCR anyway
                    ocrOptions = "--force-ocr";
                    log.info("No image pages and no extractable text, forcing OCR");
            } else {
                // OCR only image pages
                String pagesList = imagePages.stream()
                        .sorted()
                        .map(String::valueOf)
                        .collect(Collectors.joining(","));
                ocrOptions = String.format("--force-ocr --pages %s", pagesList);
            }

            String ocrCommand = String.format(
                    "ocrmypdf %s --rotate-pages --deskew --jobs %d \"%s\" \"%s\"",
                    ocrOptions,
                    jobs,
                    inputPdf.getAbsolutePath(),
                    outputPdf.getAbsolutePath()
            );

            log.info("Executing ocrmypdf command: {}", ocrCommand);
            ProcessBuilder pb = new ProcessBuilder("bash", "-c", ocrCommand);
            pb.redirectErrorStream(true);
            Process process = pb.start();
            logProcessOutput(process);

            if (!process.waitFor(processTimeoutSeconds, TimeUnit.SECONDS)) {
                process.destroy();
                log.error("ocrmypdf process timed out");
                return new ResponseEntity<>(HttpStatus.GATEWAY_TIMEOUT);
            }

            if (process.exitValue() != 0) {
                log.error("ocrmypdf failed with exit code {}", process.exitValue());
                return new ResponseEntity<>(HttpStatus.FAILED_DEPENDENCY);
            }

            log.info("ocrmypdf completed successfully. Proceeding with linearization.");

            // Linearize the output PDF using QPDF
            String linearizeCommand = String.format("qpdf --linearize --replace-input \"%s\"", outputPdf.getAbsolutePath());
            Process linearizeProcess = new ProcessBuilder("bash", "-c", linearizeCommand).start();
            logProcessOutput(linearizeProcess);

            if (!linearizeProcess.waitFor(processTimeoutSeconds, TimeUnit.SECONDS)) {
                linearizeProcess.destroy();
                log.error("QPDF linearization timed out");
                return new ResponseEntity<>(HttpStatus.REQUEST_TIMEOUT);
            }

            if (linearizeProcess.exitValue() != 0) {
                log.error("QPDF linearization failed with exit code {}", linearizeProcess.exitValue());
                return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
            }

            log.info("QPDF linearization completed successfully");

            if (!isPdfLinearized(outputPdf)) {
                log.warn("Warning: The output PDF is not linearized");
            }

            log.info("Uploading final PDF to Nuxeo");
            uploadToNuxeoClient(outputPdf, path);
            pdfMetadataExtractorService.getMetaData(outputPdf,claims);
            return new ResponseEntity<>(HttpStatus.OK);

        } catch (IOException | InterruptedException e) {
            log.error("Error processing PDF: {}", e.getMessage(), e);
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        } catch (Exception e) {
            throw new RuntimeException(e);
        } finally {
            try {
                if (document != null) {
                    document.close();
                }
            } catch (IOException e) {
                log.error("Error closing PDF document", e);
            }
            if (tempDir != null && tempDir.exists()) {
                FileSystemUtils.deleteRecursively(tempDir);
            }
        }
    }

    // Your existing upload and utility methods remain unchanged...

    public void uploadToNuxeoClient(File file, String path) {
        try {
            String batchId = getBatchId();
            if (batchId != null) {
                uploadFile(batchId, file);
                checkUploadStatus(batchId);
                createDocument(path, batchId, file);
            }
        } catch (Exception e) {
            log.error("Error uploading to Nuxeo: {}", e.getMessage(), e);
        }
    }

    private String getBatchId() throws JsonProcessingException {
        String url = fileUrl + "/upload";
        HttpEntity<String> entity = new HttpEntity<>(createAuthHeaders());

        RestTemplate restTemplate = new RestTemplate();
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, entity, String.class);

        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode node = objectMapper.readTree(response.getBody());
        String batchId = node.path("batchId").asText();
        log.info("Batch ID received: {}", batchId);
        return batchId;
    }

    public void uploadFile(String batchId, File file) throws IOException {
        String url = fileUrl + "upload/" + batchId + "/0";
        HttpHeaders headers = createAuthHeaders();
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
        headers.set("cookie", "SERVERID=nuxeodev_s1|aA+XR|aA+Wb");
        headers.set("X-Upload-Type", "normal");
        headers.set("X-File-Name", file.getName());

        byte[] fileBytes = Files.readAllBytes(file.toPath());
        HttpEntity<byte[]> requestEntity = new HttpEntity<>(fileBytes, headers);

        RestTemplate restTemplate = new RestTemplate();
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);

        log.info("Upload response: {}", response.getBody());
    }

    private void checkUploadStatus(String batchId) {
        String url = fileUrl + "upload/" + batchId;
        HttpEntity<String> entity = new HttpEntity<>(createAuthHeaders());
        new RestTemplate().exchange(url, HttpMethod.GET, entity, String.class);
    }

    private void createDocument(String path, String batchId, File file) {
        String url = fileUrl + "path/" + path;
        HttpHeaders headers = createAuthHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        Map<String, Object> body = new HashMap<>();
        body.put("entity-type", "document");
        body.put("type", "File");
        body.put("name", file.getName());
        body.put("properties", Map.of("file:content", Map.of("upload-batch", batchId, "upload-fileId", "0")));

        HttpEntity<Map<String, Object>> entity = new HttpEntity<>(body, headers);

        RestTemplate restTemplate = new RestTemplate();
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, entity, String.class);

        log.info("Create document response: {}", response.getBody());
    }

    private HttpHeaders createAuthHeaders() {
        HttpHeaders headers = new HttpHeaders();
        headers.setBasicAuth(username, password);
        return headers;
    }

    private boolean isPdfLinearized(File pdfFile) throws IOException {
        try (RandomAccessFile raf = new RandomAccessFile(pdfFile, "r")) {
            byte[] header = new byte[1024];
            raf.read(header);
            String headerStr = new String(header);
            return headerStr.contains("/Linearized");
        }
    }

    private void logProcessOutput(Process process) throws IOException {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                log.info(line);
            }
        }
    }

    /**
     * Custom PDFStreamEngine subclass for detecting images on a PDF page.
     */
    private static class ImageDetectionEngine extends PDFStreamEngine {
        private boolean foundImage = false;

        public boolean containsImage() {
            return foundImage;
        }

        @Override
        protected void processOperator(Operator operator, List<COSBase> operands) throws IOException {
            String opName = operator.getName();
            if ("Do".equals(opName)) { // 'Do' operator draws XObjects (including images)
                COSName objectName = (COSName) operands.get(0);
                PDXObject xobject = getResources().getXObject(objectName);
                if (xobject instanceof PDImageXObject) {
                    foundImage = true;
                }
            }
            super.processOperator(operator, operands);
        }
    }


    private String tryExtractText(File pdfFile) {
        try (PDDocument document = PDDocument.load(pdfFile)) {
            PDFTextStripper stripper = new PDFTextStripper();
            return stripper.getText(document);
        } catch (IOException e) {
            log.error("Error extracting text for check", e);
            return null;
        }
    }


}
